
package com.jdbc;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

class ClientHandler implements Runnable {
    public final Socket clientSocket;
    private final String[][] questions; // used for questions
    private final BufferedReader in; // used to read from clients
    private final PrintWriter out; // used to send infomration to clients
    private final Map<String, Integer> answers = new HashMap<>();
    private int num = 0; // starts first question
    private static final int QUESTION_TIMEOUT = 10000; // 10 seconds timeout
    private long startTime; // To track the start time of each question
    private Timer questionTimer; // Timer for each question

    // Handler each client connection as own object
    public ClientHandler(Socket clientSocket, String[][] questions) throws IOException {
        this.clientSocket = clientSocket;
        this.questions = questions;
        this.in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        this.out = new PrintWriter(clientSocket.getOutputStream(), true);
        out.println("Welcome to the Trivia Game, please wait for the game to begin.");
        out.println("");
        out.println("You are client: " + clientSocket.getInetAddress().toString());
        answers.put(clientSocket.getInetAddress().toString(), 0);
    }

	@Override
    public void run() {
        try {
        	addPlayerIfNotExists(clientSocket.getInetAddress().toString()); // add new player to DB if they don't exist
            while (true) {
                String answer = in.readLine();
                if (answer != null && !answer.isEmpty()) {
                    System.out.println("Received input from " + clientSocket.getInetAddress() + ": " + answer); // Server side display to see response of each client
                    answers.put(clientSocket.getInetAddress().toString(), checkAnswer(questions, answer));
                }
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void addPlayerIfNotExists(String ipAddress) throws SQLException {
        // Check if player already exists in the database
        if (playerExists(ipAddress)) {
            System.out.println("Welcome back, " + ipAddress + ".");
        } else {
            // Player doesn't exist, add them to the database
            addNewPlayer(ipAddress);
            System.out.println("Welcome, new player " + ipAddress + "! You've been registered.");
        }
    }
    
    private boolean playerExists(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        boolean exists = false;

        try {
            // Get database connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Check if player with the given IP address exists in the players table
            String sql = "SELECT id FROM players WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, ipAddress);
            exists = preparedStatement.executeQuery().next(); // Check if result set has next row
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }

        return exists;
    }
    
    public void addNewPlayer(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Insert new player into the players table with initial score and games count
            String sql = "INSERT INTO players (id, total_score, total_games) VALUES (?, 0, 0)";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, ipAddress);
            preparedStatement.executeUpdate(); // Execute the insert statement
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }
    
    // Sent to client's right before game starts so everyone is ready
    public void sendCountdown() throws InterruptedException {
    	out.println("Game starting in 3...");
    	Thread.sleep(1000);
    	out.println("2...");
    	Thread.sleep(1000);
    	out.println("1...");
    	Thread.sleep(1000);
    	out.println("Go");
    	Thread.sleep(1000);
    }
    
    public void sendGameOver() {
    	out.println("Game is over");
    }
    

    public void sendQuestion(String[][] questions, int num) {
        out.println("Question " + (num + 1) + ": " + questions[num][0]);
        out.println("Answers: \r1. " + questions[num][1] + "\r2. " + questions[num][2] + "\r3. " + questions[num][3] + "\r4. " + questions[num][4]);
        out.println("Your Answer: ");

        // Initialize the start time when sending the question
        startTime = System.currentTimeMillis();

        // Reset the timer for each new question
        resetQuestionTimer();
    }
    
    private void resetQuestionTimer() {
        // Cancel the existing timer if it's running
        if (questionTimer != null) {
            questionTimer.cancel();
        }

        // Create a new timer for the current question
        questionTimer = new Timer();
        questionTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                // Timer task to handle timeout
                out.println("Time's up!");
                answers.put(clientSocket.getInetAddress().toString(), 0); // Set score to 0 for this question
                waitForAnswer(); // Proceed to next question
            }
        }, QUESTION_TIMEOUT);
    }

    public void waitForAnswer() {
        while (!answers.containsKey(clientSocket.getInetAddress().toString())) {
            // Wait for the client to send their answer or for the timer to expire
            try {
                Thread.sleep(100); // Add a short delay to avoid busy-waiting
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    // Display game results once game has ended
    public int sendGameResults() {
    	out.println("Your Score: " + answers.get(clientSocket.getInetAddress().toString()));
    	return answers.get(clientSocket.getInetAddress().toString());
    }

    // DB query to update client's score after each game
    public void addScore(String ipAddress, int scoreIncrement) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Check if the player exists in the database
            if (!playerExists(ipAddress)) {
                // If player does not exist, add them to the database
                addNewPlayer(ipAddress);
            }

            // Update player's total_score in the players table
            String sql = "UPDATE players SET total_score = total_score + ? WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, scoreIncrement); // Set the amount by which to increment total_score
            preparedStatement.setString(2, ipAddress); // Set the player ID (IP address)
            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("Total score updated successfully for player with ID: " + ipAddress);
            } else {
                System.out.println("Player with ID " + ipAddress + " not found.");
            }
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }
    
    // DB query to update client's total games played after each game
    public void addGame(String ipAddress, int gameIncrement) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            // Establish database connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Check if the player exists in the database; add if not found
            if (!playerExists(ipAddress)) {
                addNewPlayer(ipAddress);
            }

            // Prepare SQL statement to update total_games
            String sql = "UPDATE players SET total_games = total_games + 1 WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);

            // Set the player ID as a parameter
            preparedStatement.setString(1, ipAddress);

            // Execute the update query
            int rowsUpdated = preparedStatement.executeUpdate();

            // Check if update was successful
            if (rowsUpdated > 0) {
                System.out.println("Total games updated successfully for player with ID: " + ipAddress);
            } else {
                System.out.println("Player with ID " + ipAddress + " not found or update failed.");
            }
        } catch (SQLException e) {
            // Handle database-related exceptions
            System.err.println("Error updating total games for player: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Close PreparedStatement and database connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }

    // Method to retrieve player's ip as their id.
    private String getPlayerId(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String playerId = null; // Use String type to store player ID

        try {
            // Get database connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Retrieve playerId based on the id (IP address)
            String sql = "SELECT id FROM players WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, ipAddress);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                playerId = resultSet.getString("id"); // Retrieve player ID (IP address) as String
            }
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }

        return playerId; // Return player ID (IP address) as String
    }
    
    // Displays all user's in the database when "leaderboard" is called by server
    public void displayLeaderboard(PrintWriter out) throws SQLException {
        String query = "SELECT id, total_score, total_games FROM players ORDER BY total_score DESC";

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {
        	out.println("");
            out.println("Global Leaderboard:");

            int position = 1; // Counter to increment leaderboard

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                int totalScore = resultSet.getInt("total_score");
                int totalGames = resultSet.getInt("total_games");
                int avgScore = totalScore / totalGames;

                // Send the player information to the client
                out.println(position + ") User: " + id + " Score: " + totalScore + ", Games Played: " + totalGames + ", Average Score per Game: " + avgScore);
                position++; // Increment for the next player
            }
        }
    }

    // Checks client's answer each round as well as update their total score and total games in DB
    public int checkAnswer(String[][] questions, String answer) throws SQLException {
        String correctAnswer = questions[num][5]; // Accessing the correct answer for the current question
        String id = clientSocket.getInetAddress().toString();
        
        // Check if the answer is correct
        if (correctAnswer.equals(answer)) {
            // Calculate score based on response time
            long responseTime = QUESTION_TIMEOUT - (QUESTION_TIMEOUT - getAnswerTime());
            int scoreIncrement = scoreBasedOnSpeed(responseTime);
            
            try {
                addScore(id, scoreIncrement); // Update player's score
            } catch (SQLException e) {
                e.printStackTrace();
            }
            answers.put(id, answers.get(id) + scoreIncrement); // Update the player's score in the map
        }
        // Move to the next question
        num++;

        // Check if all questions have been answered
        if (num == 1) {
            // All questions have been answered, increment total games for the player
            int gameIncrement = 1;
            addGame(id, gameIncrement);
        }

        return answers.get(id); // Return updated score 
    }

    private long getAnswerTime() {
        return System.currentTimeMillis() - startTime;
    }

    private int scoreBasedOnSpeed(long responseTime) {
        // Calculate score based on response time
        // Example: More points for faster responses (adjust this logic based on your scoring criteria)
        if (responseTime < 2000) { //points if answered with 2 seconds
            return 200;
        } else if (responseTime < 4000) { //points if answered with 4 seconds
            return 150;
        } else if (responseTime < 8000) { //points if answered with 8 seconds
            return 100;
        } else { // points if less than 2 seconds remains
            return 50;
        }
    }
}
