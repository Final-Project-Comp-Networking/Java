import java.io.*;
import java.net.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import com.jdbc.user.getQuestions;

public class GameServerTest_4 {
    private static final int PORT = 8080;
    private static final int MAX_PLAYERS = 1; //update total players playing here
    private static final List<ClientHandler2> clients = new ArrayList<>();
    static Connection connection; // Database connection
    
    public static void main(String[] args) throws Exception {
        String[][] questions = getQuestions.questionList();

        // Setup database connection
        setupDatabaseConnection();

        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Server started on port " + PORT);

            while (clients.size() < MAX_PLAYERS) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("New client connected: " + clientSocket.getInetAddress());
                // add method to add user to database;
                ClientHandler2 clientHandler = new ClientHandler2(clientSocket, questions);
                clients.add(clientHandler);
                new Thread(clientHandler).start();
                System.out.println("Lobby Has: " + clients.size() + " Players");
            }

            // Start the game
            startGame(questions);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            // Close database connection when no longer needed
            if (connection != null) {
                try {
                    connection.close();
                    System.out.println("Database connection closed.");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private static void setupDatabaseConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");

            String dbURL = "jdbc:mysql://localhost:3306/triviaGame";
            String username = "root";
            String password = "uwwhitewater";

            connection = DriverManager.getConnection(dbURL, username, password);
            System.out.println("Database connection established.");
        } catch (ClassNotFoundException | SQLException e) {
            throw new RuntimeException("Failed to connect to database.", e);
        }
    }

    private static void startGame(String[][] questions) throws Exception {
        try (BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in))) {
            Scanner user = new Scanner(System.in);
            Scanner start = new Scanner(System.in);

            System.out.println("Type \"Start\" to start game: ");
            String s = start.next();

            for (int i = 0; i < 2; i++) { // Number of questions in the game
                int rq = getQuestions.getRandomQuestion(questions);

                // Send question to all clients
                for (ClientHandler2 client : clients) {
                    client.sendQuestion(questions, i);
                }

                // Wait for all clients to answer
                for (ClientHandler2 client : clients) {
                    client.waitForAnswer();
                }

                System.out.println("Enter \"ok\" to continue: ");
                String wait = user.next();
            }

            user.close();
            start.close();

         // Send game results to clients
            HashMap<String , Integer> hmap = new HashMap<>();
            
            for (ClientHandler2 client : clients) {
            	hmap.put(client.clientSocket.getInetAddress().toString(), client.sendGameResults());
            }
            
            List<Map.Entry<String, Integer>> entryList = new ArrayList<>(hmap.entrySet());

            // Sort the list by values in descending order using a custom comparator
            Collections.sort(entryList, new Comparator<Map.Entry<String, Integer>>() {
                public int compare(Map.Entry<String, Integer> entry1, Map.Entry<String, Integer> entry2) {
                    // Sort in descending order of values
                    return entry2.getValue().compareTo(entry1.getValue());
                }
            });

            // Print the sorted entries
            System.out.println("Leaderboard:");
            for (Map.Entry<String, Integer> entry : entryList) {
                System.out.println(entry.getKey() + ": " + entry.getValue());
            }
        }
    }
}

class ClientHandler2 implements Runnable {
    public final Socket clientSocket;
    private final String[][] questions;
    private final BufferedReader in;
    private final PrintWriter out;
    private final Map<String, Integer> answers = new HashMap<>();
    private int num = 0;

    public ClientHandler2(Socket clientSocket, String[][] questions) throws IOException {
        this.clientSocket = clientSocket;
        this.questions = questions;
        this.in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        this.out = new PrintWriter(clientSocket.getOutputStream(), true);
        out.println("Welcome to Trivia Night, Enter A Name: ");
        answers.put(clientSocket.getInetAddress().toString(), 0);
    }

    @Override
    public void run() {
        try {
        	addPlayerIfNotExists(clientSocket.getInetAddress().toString());
            while (true) {
                String answer = in.readLine();
                if (answer != null && !answer.isEmpty()) {
                    System.out.println("Received input from " + clientSocket.getInetAddress() + ": " + answer);
                    answers.put(clientSocket.getInetAddress().toString(), checkAnswer(questions, answer));
                    // Optionally, you can validate and process the answer here
                }
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void addPlayerIfNotExists(String ipAddress) throws SQLException {
        // Check if player already exists in the database
        if (playerExists(ipAddress)) {
            System.out.println("Welcome back, " + ipAddress + "!");
        } else {
            // Player doesn't exist, add them to the database
            addNewPlayer(ipAddress);
            System.out.println("Welcome, new player " + ipAddress + "! You've been registered.");
        }
    }
    
    private boolean playerExists(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        boolean exists = false;

        try {
            // Get database connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Check if player with the given IP address exists in the players table
            String sql = "SELECT id FROM players WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, ipAddress);
            exists = preparedStatement.executeQuery().next(); // Check if result set has next row
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }

        return exists;
    }
    
    public void addNewPlayer(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Insert new player into the players table with initial score and games count
            String sql = "INSERT INTO players (id, total_score, total_games) VALUES (?, 0, 0)";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, ipAddress);
            preparedStatement.executeUpdate(); // Execute the insert statement
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }
    

    public void sendQuestion(String[][] questions, int num) {
        out.println("Question " + (num + 1) + ": " + questions[num][0]);
        out.println("Answers: \r1. " + questions[num][1] + "\r2. " + questions[num][2] + "\r3. " + questions[num][3] + "\r4. " + questions[num][4]);
        out.println("Your Answer: ");
    }

    public void waitForAnswer() {
        while (!answers.containsKey(clientSocket.getInetAddress().toString())) {
            // Wait for the client to send their answer
            try {
                Thread.sleep(100); // Add a short delay to avoid busy-waiting
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public int sendGameResults() {
        // Implement logic to send game results to the client
    	out.println("Your Score: " + answers.get(clientSocket.getInetAddress().toString()));
    	return answers.get(clientSocket.getInetAddress().toString());
    }

    public void addScore(String ipAddress, int scoreIncrement) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Check if the player exists in the database
            if (!playerExists(ipAddress)) {
                // If player does not exist, add them to the database
                addNewPlayer(ipAddress);
            }

            // Update player's total_score in the players table
            String sql = "UPDATE players SET total_score = total_score + ? WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, scoreIncrement); // Set the amount by which to increment total_score
            preparedStatement.setString(2, ipAddress); // Set the player ID (IP address)
            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("Total score updated successfully for player with ID: " + ipAddress);
            } else {
                System.out.println("Player with ID " + ipAddress + " not found.");
            }
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }
    
    public void addGame(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            // Establish database connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Check if the player exists in the database; add if not found
            if (!playerExists(ipAddress)) {
                addNewPlayer(ipAddress);
            }

            // Prepare SQL statement to update total_games
            String sql = "UPDATE players SET total_games = total_games + 1 WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);

            // Set the player ID as a parameter
            preparedStatement.setString(1, ipAddress);

            // Execute the update query
            int rowsUpdated = preparedStatement.executeUpdate();

            // Check if update was successful
            if (rowsUpdated > 0) {
                System.out.println("Total games updated successfully for player with ID: " + ipAddress);
            } else {
                System.out.println("Player with ID " + ipAddress + " not found or update failed.");
            }
        } catch (SQLException e) {
            // Handle database-related exceptions
            System.err.println("Error updating total games for player: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Close PreparedStatement and database connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }


    private String getPlayerId(String ipAddress) throws SQLException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String playerId = null; // Use String type to store player ID

        try {
            // Get database connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/triviaGame", "root", "uwwhitewater");

            // Retrieve playerId based on the id (IP address)
            String sql = "SELECT id FROM players WHERE id = ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, ipAddress);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                playerId = resultSet.getString("id"); // Retrieve player ID (IP address) as String
            }
        } finally {
            // Close the prepared statement and connection
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        }

        return playerId; // Return player ID (IP address) as String
    }



    public int checkAnswer(String[][] questions, String answer) {
        String correctAnswer = questions[num][5]; // Accessing the correct answer for the current question
        String id = clientSocket.getInetAddress().toString();

        // Check if the answer is correct
        if (correctAnswer.equals(answer)) {
            num++; // Move to the next question
            int scoreIncrement = 100; // Increment amount for correct answer
            try {
                addScore(id, scoreIncrement); // Update player's score
            } catch (SQLException e) {
                e.printStackTrace();
            }
            answers.put(id, answers.get(id) + scoreIncrement); // Update the player's score in the map
        } else {
            num++; // Move to the next question
            // No points awarded for incorrect answer
        }

        return answers.get(id); // Return the updated score
    }
}
